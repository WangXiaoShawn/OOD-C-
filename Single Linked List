/Single Linked List
#include <iostream>

using namespace std;



class node {
public:
	int value;
	node* next;
	node(int i) { value = i; next = nullptr; }
	node() { next = nullptr; }//default constructor
};

class LinkedList {
public:
	node* head;// points to the first node of the linked list.
	LinkedList() { head = nullptr; }//default constructor
	LinkedList(int n, int m);//constructor an n-node linked list with random values in 0 ... m-1
	void print();
	void reverse();
	void sort();//prototype  sort them in ascemnding order
	void remove_one(int k);//Delete the first occurance of node with value k

};


void LinkedList::remove_one(int k) {
	if (!head) return; //0 node
	if (head->value == k) {
		node* p1{ head->next };
		delete head;
		head = p1;
		return;
	}
	node* p1{ head }, * p2{ head->next };
	while (p2) {
		if (p2->value == k) {
			p1->next = p2->next;
			delete p2;
			return;
		}
		p1 = p2;
		p2 = p2->next;
	}
}

void LinkedList::sort() {//selection sort
	if (!head || !head->next) return; // 0 or 1 node
	node* p1{ head }, * p2;
	while (p1->next) {
		p2 = p1->next;
		node* p_min{ p1 };
		int min{ p1->value };
		while (p2) {
			if (p2->value < min) {
				min = p2->value;
				p_min = p2;
			}
			p2 = p2->next;
		}
		p_min->value = p1->value;
		p1->value = min;
		p1 = p1->next;
	}
}


void LinkedList::reverse() {
	if (!head || !head->next) return; //0 or 1 node

	node* p1{ head }, * p2, * p3;
	p2 = p1->next;
	while (p2) {
		p3 = p2->next;
		p2->next = p1;
		if (p1 == head) p1->next = nullptr;
		p1 = p2;
		p2 = p3;
	}
	head = p1;

}





LinkedList::LinkedList(int n, int m) {
	head = nullptr;
	for (int i = 0; i < n; ++i) {
		node* p1 = new node{ rand() % m };
		p1->next = head;
		head = p1;
	}
}


void LinkedList::print() {
	node* p1{ head };
	while (p1) {//while (p1 != nullptr)
		cout << p1->value << " ";
		p1 = p1->next;
	}
}





int main() {

	
	LinkedList L1{ 20, 10 };
	L1.print();
	L1.reverse();
	cout << endl;
	L1.print();
	cout << endl;
	L1.remove_one(1);
	L1.remove_one(6);
	L1.remove_one(8);
	L1.print();
	cout << endl;

	L1.sort();
	L1.print();
	cout << endl;

	

	return 0;
}
