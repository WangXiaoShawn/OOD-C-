//tree
#include <iostream>

using namespace std;



class Tnode {
public:
	int value;
	Tnode* Lchild;
	Tnode* Rchild;
	Tnode(int i) { value = i; Lchild = Rchild = nullptr; }
	Tnode() { Lchild = Rchild = nullptr; }
};

class Tree {//full tree;  1 node (level 1), 3 nodes (Level 2), 7 nodes (level 3), 15 nodes
public:
	Tnode* root;
	Tree() { root = nullptr; }
	Tnode* MakeTree(int k, int m);//k levels with values in 0 ... m-1
	void InorderPrint(Tnode* p);
	int sum(Tnode* p);
	bool find(Tnode* p, int k);
	void mirror(Tnode* p);
};


void Tree::mirror(Tnode* p) {// Tranform a tree into its mirror
	if (!p || !p->Lchild) return;//0 or 1 node
	mirror(p->Lchild);
	mirror(p->Rchild);
	swap(p->Lchild, p->Rchild);
}

bool Tree::find(Tnode* p, int k) {//if k exists in the tree, return true (1), else return false (0)
	if (!p) return false;
	if (!p->Lchild) return (p->value == k);
	return (p->value == k) || find(p->Lchild, k) || find(p->Rchild, k);
}

int Tree::sum(Tnode* p) {//return sum of all values in a tree rooted by the node pointed by p
	if (!p) return 0;
	if (!p->Lchild) return p->value;//p points to a leaf node
	return p->value + sum(p->Lchild) + sum(p->Rchild);
}


Tnode* Tree::MakeTree(int k, int m) {//constructing full trees
	Tnode* p1 = new Tnode(rand() % m);
	if (k == 1) return p1;//k ie level of the tree
	p1->Lchild = MakeTree(k - 1, m);
	p1->Rchild = MakeTree(k - 1, m);
	return p1;
}

void Tree::InorderPrint(Tnode* p) {
	if (!p) return;
	InorderPrint(p->Lchild);
	cout << p->value << " ";
	InorderPrint(p->Rchild);
}




int main() {


	Tree T1;
	T1.root = T1.MakeTree(3, 20);
	T1.InorderPrint(T1.root);
	cout << endl;
	cout << T1.sum(T1.root) << endl;
	cout << T1.find(T1.root, 12) << endl;//1  true
	cout << T1.find(T1.root, 7) << endl;//1 true
	cout << T1.find(T1.root, 14) << endl;//0 false

	T1.mirror(T1.root);
	T1.InorderPrint(T1.root);
	cout << endl;


	return 0;
}
